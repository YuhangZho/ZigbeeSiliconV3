#include "gpd-components-common.h"

/** @brief This is called by framework to initialise the NVM system
 *
 */
void emberGpdAfPluginNvInitCallback(void)
{
}

/** @brief Called to the application to give a chance to load or store the GPD Context
 *.        in a non volatile context. Thsi can help the application to use any other
 *         non volatile storage.
 *
 * @param gpd pointer to gpd instance
 * @param nvmData The pointer to the data that needs saving or retrieving to or from
 *                the non-volatile memory.
 * @param sizeOfNvmData The size of the data non-volatile data.
 * @param loadStore indication wether to load or store the context.
 * Ver.: always
 *
 * @return true if application handled it.
 */
bool emberGpdAfPluginNvSaveAndLoadCallback(EmberGpd_t * gpd,
                                           uint8_t * nvmData,
                                           uint8_t sizeOfNvmData,
                                           EmebrGpdNvLoadStore_t loadStore)
{
  return false;
}

/** @brief Called from the incomming command handler context to let the application
 *         handle the channel configuration.
 *
 * @param channel channel.
 * Ver.: always
 *
 */
void emberGpdAfPluginCommissioningChannelConfigCallback(uint8_t channel)
{
}

/** @brief Called from the imcomming command handler context to let the application
 *         handle the commissioning reply.
 *
 * @param length Length of the commissioning reply payload.
 * @param commReplyPayload The pointer to the commissioning reply payload.
 * Ver.: always
 *
 */
void emberGpdAfPluginCommissioningReplyCallback(uint8_t length,
                                                uint8_t * commReplyPayload)
{
}

/** @brief Called from the imcomming command handler context for all the incoming
 *         command before the command handler handles it. based on the return code
 *         of this callback the internal command handler skips the processing.
 *
 * @param gpdCommand CommandId.
 * @param length length of the command
 * @param commandPayload The pointer to the commissioning reply payload.
 * Ver.: always
 *
 * @return true if application handled it.
 */
bool emberGpdAfPluginIncomingCommandCallback(uint8_t gpdCommand,
                                            uint8_t length,
                                            uint8_t * commandPayload)
{
  return false;
}

/** @brief This is called by the application state machine to indicate when the GPD is going to sleep.
 *         Typically this will be called from rx-after-tx state machines and application state machine.
 *
 */
void emberGpdAfPluginSleepCallback(void)
{
  // If Enters EM0 instead or awaken by other things, made to wait by following
  // code until the LE Timer expires to provide the exact rxOffset before receive.
  EMU_EnterEM2(true);
}

/** @brief This is called by framework to get a random number. User should implement it appropriately
 * depending on the random number generation in the project.
 *
 * @return a 32bit random number.
 */
uint32_t emberGpdAfPluginGetRandomCallback(void)
{
  volatile uint32_t randomValue;
  return randomValue;
}

/** @brief This is called by framework to get the IEEE (EUI64) address of the GPD.
 * Typically GPD application may have the IEEE address for each of the GPD programmed at a different
 * location or storage, so the framework obtains the address through this callback.
 *
 * @param eui pointer to collect the ieee
 * @param gpdEndpoint pointer to collect gpd endpoint
 */
void emberGpdAfPluginGetGpdIeeeCallback(uint8_t *eui,
                                        uint8_t *gpdEndpoint)
{
  uint8_t ieee[] = EMBER_AF_PLUGIN_APPS_IEEE;
  memcpy(eui, ieee, EMBER_GPD_EUI64_SIZE);
  *gpdEndpoint = EMBER_AF_PLUGIN_APPS_GPD_ENDPOINT;
}
