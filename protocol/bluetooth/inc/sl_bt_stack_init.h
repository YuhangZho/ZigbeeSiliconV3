/***************************************************************************//**
 * @brief Bluetooth stack initialization APIs
 *******************************************************************************
 * # License
 * <b>Copyright 2019 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

#ifndef SL_BT_STACK_INIT_H
#define SL_BT_STACK_INIT_H

#include "sl_bt_types.h"
#include "sl_status.h"
#include "sl_bt_stack_config.h"

/* Forward declarations of internal initialization functions */
void sli_bt_class_dfu_init_full();
void sli_bt_class_dfu_init_optimized();
void sli_bt_class_system_init_full();
void sli_bt_class_system_init_optimized();
void sli_bt_class_gap_init_full();
void sli_bt_class_gap_init_optimized();
void sli_bt_class_advertiser_init_full();
void sli_bt_class_advertiser_init_optimized();
void sli_bt_class_scanner_init_full();
void sli_bt_class_scanner_init_optimized();
void sli_bt_class_sync_init_full();
void sli_bt_class_sync_init_optimized();
void sli_bt_class_connection_init_full();
void sli_bt_class_connection_init_optimized();
void sli_bt_class_gatt_init_full();
void sli_bt_class_gatt_init_optimized();
void sli_bt_class_gatt_server_init_full();
void sli_bt_class_gatt_server_init_optimized();
void sli_bt_class_nvm_init_full();
void sli_bt_class_nvm_init_optimized();
void sli_bt_class_test_init_full();
void sli_bt_class_test_init_optimized();
void sli_bt_class_sm_init_full();
void sli_bt_class_sm_init_optimized();
void sli_bt_class_ota_init_full();
void sli_bt_class_ota_init_optimized();
void sli_bt_class_coex_init_full();
void sli_bt_class_coex_init_optimized();
void sli_bt_class_l2cap_init_full();
void sli_bt_class_l2cap_init_optimized();
void sli_bt_class_cte_transmitter_init_full();
void sli_bt_class_cte_transmitter_init_optimized();
void sli_bt_class_cte_receiver_init_full();
void sli_bt_class_cte_receiver_init_optimized();
extern void ll_initAFH();
extern void ll_initPeriodicAdv();
extern void ll_connSchAlgorithmEvenEnable();
extern void sli_bt_init_periodic_advertising();
extern void sli_bt_init_whitelisting();

/**
 * @brief Initialize the Bluetooth stack.
 *
 * @param config The pointer of a valid configuration parameters
 * @return SL_STATUS_OK if the initialization was successful; Other error code
 *   indicates a failure.
 */
sl_status_t sl_bt_init_stack(const sl_bt_configuration_t *config);

/**
 * @brief Initialize SL_BT_API class dfu.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_dfu_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_dfu_init_full();
#else
  sli_bt_class_dfu_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class system.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_system_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_system_init_full();
#else
  sli_bt_class_system_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class gap.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_gap_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_gap_init_full();
#else
  sli_bt_class_gap_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class advertiser.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_advertiser_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_advertiser_init_full();
#else
  sli_bt_class_advertiser_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class scanner.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_scanner_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_scanner_init_full();
#else
  sli_bt_class_scanner_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class sync.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_sync_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_sync_init_full();
#else
  sli_bt_class_sync_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class connection.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_connection_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_connection_init_full();
#else
  sli_bt_class_connection_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class gatt.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_gatt_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_gatt_init_full();
#else
  sli_bt_class_gatt_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class gatt_server.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_gatt_server_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_gatt_server_init_full();
#else
  sli_bt_class_gatt_server_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class nvm.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_nvm_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_nvm_init_full();
#else
  sli_bt_class_nvm_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class test.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_test_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_test_init_full();
#else
  sli_bt_class_test_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class sm.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_sm_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_sm_init_full();
#else
  sli_bt_class_sm_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class ota.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_ota_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_ota_init_full();
#else
  sli_bt_class_ota_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class coex.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_coex_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_coex_init_full();
#else
  sli_bt_class_coex_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class l2cap.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_l2cap_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_l2cap_init_full();
#else
  sli_bt_class_l2cap_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class cte_transmitter.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_cte_transmitter_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_cte_transmitter_init_full();
#else
  sli_bt_class_cte_transmitter_init_optimized();
#endif
}

/**
 * @brief Initialize SL_BT_API class cte_receiver.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the class is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_class_cte_receiver_init()
{
#ifdef SL_BT_API_FULL
  sli_bt_class_cte_receiver_init_full();
#else
  sli_bt_class_cte_receiver_init_optimized();
#endif
}

/**
 * Initialize multiprotocol. Please note that multiprotocol version of RAIL is
 * needed.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the feature is included in the project. The application is
 * not expected to call this function directly.
 */
void sl_bt_init_multiprotocol();

/**
 * Initialize and enable Adaptive Frequency Hopping (AFH) feature.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the feature is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_init_afh()
{
  ll_initAFH();
}

/**
 * Enable even scheduling algorithm for Bluetooth
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the feature is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_enable_even_scheduling()
{
  ll_connSchAlgorithmEvenEnable();
}

/**
 * Initialize and enable Periodic Advertising feature.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the feature is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_init_periodic_advertising()
{
  ll_initPeriodicAdv();
  sli_bt_init_periodic_advertising();
}

/**
 * Initialize whitelisting feature.
 *
 * This function is automatically called by code generated by the Universal
 * Configurator if the feature is included in the project. The application is
 * not expected to call this function directly.
 */
static inline void sl_bt_init_whitelisting()
{
  sli_bt_init_whitelisting();
}

#endif