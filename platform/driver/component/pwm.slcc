id: pwm
label: PWM
package: platform
description: >
  The PWM driver uses a high frequency hardware timer to generate Pulse Width
  Modulated (PWM) waveforms with configurable frequency, polarity and duty 
  cycle. Each PWM output requires one TIMER Compare/Capture channel. 


  This component is instantiable, meaning that several named instances can be 
  created. For each instance a configuration is generated along with an 
  initialization struct set according to this configuration. These instance
  defines and variables are available in a generated header file, 
  sl_pwm_instances.h.


  If the Services->Runtime->System Setup->System Init component is included in
  a project, the driver instances will be initialized automatically, using the
  instance configurations, during the sl_system_init() call in main.c.


  Selecting this component will also include the PWM Core component, which is 
  the implementation of the PWM driver itself.
category: Platform|Driver
quality: production
instantiable:
  prefix: pwm
config_file:
  - path: platform/driver/pwm/config/s0/sl_pwm_init_{{instance}}_config.h
    file_id: pwm_config
    condition: [device_series_0]
  - path: platform/driver/pwm/config/s1/sl_pwm_init_{{instance}}_config.h
    file_id: pwm_config
    condition: [device_series_1]
  - path: platform/driver/pwm/config/s2/sl_pwm_init_{{instance}}_config.h
    file_id: pwm_config
    condition: [device_series_2]
provides:
  - name: pwm
    allow_multiple: true  
requires:
  - name: pwm_core
template_contribution:
  - name: pwm_instances
    value: "{{instance}}"
documentation:
    docset: gecko-platform
    document: driver/api/group-pwm