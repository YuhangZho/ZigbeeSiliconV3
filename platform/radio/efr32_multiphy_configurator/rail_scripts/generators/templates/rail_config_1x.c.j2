{% extends "base.j2" %}
{% block filename %}{{filename}}.c{% endblock %}
{% block title %}{{title}}{% endblock %}
{% block content -%}
#include "em_device.h"
#include "rail_config.h"
{% for phyConfigEntryName, phyConfigEntry in phyConfigEntries.items() %}
const uint32_t {{phyConfigEntryName}}_phyInfo[] = {
  {{phyConfigEntry.phyInfo.phyInfoData.version}}UL,
  {{'0x{:08X}'.format(phyConfigEntry.phyInfo.phyInfoData.freqOffsetFactor_fxp)}}UL, // {{phyConfigEntry.phyInfo.phyInfoData.freqOffsetFactor}}
};
{% if phyConfigEntry.frameCodingTable %}
uint32_t frameCodingTable[] = {
  {%- for items in phyConfigEntry.frameCodingTable|batch(4) %}
  {{ items|join(", ") -}},
  {%- endfor %}
};
{% endif %}
{%- if phyConfigEntry.fecEnabled and phyConfigEntry.convDecodeBufferSize > 0 %}
__ALIGNED(4) uint8_t convDecodeBuffer[{{phyConfigEntry.convDecodeBufferSize}}];
{% endif %}
{%- for entryName, entry in phyConfigEntry.dynamicSlicerConfigEntries.items() %}
uint32_t {{entryName}}[] = {
  {{"0x{:04X}{:04X}UL".format(entry.level, entry.threshold)}},
  (uint32_t) {{"&%s"|format(entry.next.name) if entry.next.name else "0UL"}},
};
{% endfor %}
const uint32_t {{phyConfigEntryName}}[] = {
{%- for entryName, entry in phyConfigEntry.modemConfigEntries.items() %}
  {%- set firstValue = entry.encodedValues|first %}
  {{"0x{:08X}UL, ".format(entry.encodedAction)}}
  {{- "0x{:08X}UL,".format(firstValue) if firstValue is number else "(uint32_t) &{},".format(firstValue._uniqueName|default(firstValue.name|default(firstValue)))}}
{%- endfor %}

  0xFFFFFFFFUL,
};

const uint32_t *configList[] = {
  {{phyConfigEntryName}},
};

const char *configNames[] = {
  "{{phyConfigEntryName}}",
};

RAIL_ChannelConfigEntry_t {{phyConfigEntryName}}_channels[] = {
  {%- for entryName, entry in phyConfigEntry.channelConfigEntries.items() %}
  { {{entry.channelNumberStart}}, {{entry.channelNumberEnd}}, {{entry.channelSpacing}}, {{entry.baseFrequency}} },
  {%- endfor %}
};

const RAIL_ChannelConfig_t {{phyConfigEntryName}}_channelConfig = {
  {{phyConfigEntryName}}_channels,
  {{phyConfigEntry.channelConfigEntries|length}},
};

const RAIL_ChannelConfig_t *channelConfigs[] = {
  &{{phyConfigEntryName}}_channelConfig,
};
{%- if phyConfigEntry.frameLengthList %}
static uint16_t {{phyConfigEntryName}}LenList[] = { {{""}}
  {%- for length in phyConfigEntry.frameLengthList -%}
    {{length|int}}{{", "}}
  {%- endfor -%}
{{""}} };
static uint8_t {{phyConfigEntryName}}ValidList[] = { {{""}}
  {%- for valid in phyConfigEntry.frameType.isValid.values -%}
    {{valid|int}}{{", "}}
  {%- endfor -%}
{{""}} };
static RAIL_FrameType_t {{phyConfigEntryName}}_frameTypeConfig = {
  {{phyConfigEntry.frameType.offset}}, {{phyConfigEntry.frameType.mask}}, (uint16_t *){{phyConfigEntryName}}LenList, (uint8_t *){{phyConfigEntryName}}ValidList, false
};
RAIL_FrameType_t *frameTypeConfigList[] = {
  &{{phyConfigEntryName}}_frameTypeConfig,

};
{% else %}

RAIL_FrameType_t *frameTypeConfigList[] = {
  NULL
};
{% endif %}
const uint8_t irCalConfig[] = {
  {{phyConfigEntry.irCalConfig|length}}{{", "}}
  {%- for value in phyConfigEntry.irCalConfig[:-1] -%}
    {{value|int}}{{", "}}
  {%- endfor %}
  {{-phyConfigEntry.irCalConfig|last}}
};
{% endfor -%}
{% endblock %}
