'''
Created on Aug 25, 2014

@author: sesuskic
'''
from copy import deepcopy
from common import CategoryInterface
 
__all__ = ["PerformIqCal"]

class PerformIqCal(CategoryInterface):
    def __init__(self):
        super(PerformIqCal, self).__init__()
        self.reset()
        
    def reset(self):
        self.value = False
        
    def get_configuration(self, cc):
        command_list = []
        if self.enabled and self.value:
            hi_low_ircal_separator_frequency = 525e6
            prop_list = cc._configure_modem(True)
            for prop in prop_list:
                # This feels a bit hacky, but wider scale refactoring might be needed
                # to make this read a little bit more smoothly.
                ir_cal_prop = deepcopy(prop)
                ir_cal_prop.name += "_IR_CAL"
                ir_cal_prop.set_cmd.property_name = ir_cal_prop.name
                command_list.append(ir_cal_prop.configure())
            command_list += cc.get_category("Global").get_configuration(cc)
            command_list.append(cc.get_command("START_RX"))
            if cc.get_option("Modem.API_fc") > hi_low_ircal_separator_frequency:
                cc.ir_cal_0.inputs.get_parameter_set("RX_CHAIN_SETTING1").set_value(0xfa)
                cc.ir_cal_1.inputs.get_parameter_set("RX_CHAIN_SETTING1").set_value(0xfa)
            command_list.append(cc.ir_cal_0)
            # TODO: Figure out if I ever need to add four NOP commands.
            # Even if yes, configure() takes in **kwargs, and that could contain
            # something indicating that the generated byte arrays are not part of
            # an app builder header, but some interactive use-case, e.g. batch and
            # RF Eval
            command_list.append(cc.ir_cal_1)
            # TODO: Figure out if I ever need to add four NOP commands.
        return command_list
            
