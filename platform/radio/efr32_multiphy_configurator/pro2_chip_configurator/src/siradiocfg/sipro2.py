'''
Created on Aug 5, 2013

@author: sesuskic
'''
from copy import deepcopy
from .siradio import SiRadio
from .modemcalchelper import ModemCalcHelper
from .inputs import Pro2Inputs
from .bandwidthtimeconfig import BandwidthTime

__all__ = ["SiPro2"]

class SiPro2(SiRadio):
    def __init__(self, radioApi):
        super(SiPro2, self).__init__(radioApi)
        self.modem_calc_command_list = []
        self.modem_calc_iq_cal_command_list = []
        if ("IR_CAL" in self.radio_api.features):
            self._init_ir_cal_commands()
        
    def _init_ir_cal_commands(self):
        self.ir_cal_0 = deepcopy(self.get_command("IRCAL"))
        self.ir_cal_0.name = "IR_CAL_0"
        self.ir_cal_0.inputs.get_parameter_set("SEARCHING_STEP_SIZE").set_value(0x56)
        self.ir_cal_0.inputs.get_parameter_set("SEARCHING_RSSI_AVG").set_value(0x10)
        self.ir_cal_0.inputs.get_parameter_set("RX_CHAIN_SETTING1").set_value(0xca)
        self.ir_cal_0.inputs.get_parameter_set("RX_CHAIN_SETTING2").set_value(0xf0)
        self.ir_cal_1 = deepcopy(self.get_command("IRCAL"))
        self.ir_cal_1.name = "IR_CAL_1"
        self.ir_cal_1.inputs.get_parameter_set("SEARCHING_STEP_SIZE").set_value(0x13)
        self.ir_cal_1.inputs.get_parameter_set("SEARCHING_RSSI_AVG").set_value(0x10)
        self.ir_cal_1.inputs.get_parameter_set("RX_CHAIN_SETTING1").set_value(0xca)
        self.ir_cal_1.inputs.get_parameter_set("RX_CHAIN_SETTING2").set_value(0xf0)
        self.ir_change_state  = deepcopy(self.get_command("CHANGE_STATE"))
        self.ir_change_state.name = "IR_CAL_CHANGE_STATE"
        self.ir_change_state.set_field("NEXT_STATE1", "NEW_STATE", 3)
        
    def _create_inputs(self, radioApi):
        self.inputs = Pro2Inputs(radioApi)
        
    def _restrict_modem_inputs(self):
        self.inputs.Modem.API_hi_pfm_div_mode = 1

    def _is_gfsk(self):
        return self.get_option("Modem.API_modulation_type") == 3 or self.get_option("Modem.API_modulation_type") == 5
    
    def _is_needed_to_change_deviation(self):
        return (self.get_option("BandwidthTime.enabled") and 
                self._is_gfsk() and
                self.get_option("BandwidthTime.value") >= BandwidthTime.BT_DEVIATION_MULTIPLIER_THRESHOLD)
        
    def _is_fsk4(self):
        return self.get_option("Modem.API_modulation_type") == 4 or self.get_option("Modem.API_modulation_type") == 5
    
    def _configure_modem(self):
        self.modem_calc_command_list = []
        self.modem_calc_iq_cal_command_list = []
        modem_propery_list = ModemCalcHelper.configureModem(self)
        for prop in modem_propery_list:
            if "TX" in self.radio_api.features:
                if prop.name == "MODEM_FREQ_DEV" and self._is_needed_to_change_deviation():
                    deviation = prop.get_value();
                    # TODO: This is hacky, but right now the properties and fields do not use
                    # size in bits and type to figure out if the set_value/set_field will overflow
                    if not(deviation > 0x1ffff):
                        prop.set_value(deviation*2)
            if (prop.name == "MODEM_FSK4_MAP" and
                self.get_option("ModemFsk4Map.enabled") and
                self._is_fsk4()):
                prop.set_value(self.get_option("ModemFsk4Map.value"))
            self.modem_calc_command_list.append(prop.configure())
        if "IR_CAL" in self.radio_api.features:
            if (self.get_option("PerformIqCal.enabled") and 
            self.get_option("PerformIqCal.value")):
                self._perform_iq_cal()
        
    def _perform_iq_cal(self):
        hi_low_ircal_separator_frequency = 525e6
        prop_list = ModemCalcHelper.configureModem(self, True)
        for prop in prop_list:
            # This feels a bit hacky, but wider scale refactoring might be needed
            # to make this read a little bit more smoothly.
            ir_cal_prop = deepcopy(prop)
            ir_cal_prop.name += "_IR_CAL"
            ir_cal_prop.set_cmd.property_name = ir_cal_prop.name
            self.modem_calc_iq_cal_command_list.append(ir_cal_prop.configure())
        self.modem_calc_iq_cal_command_list += self.inputs.Global.get_configuration(self)
        self.modem_calc_iq_cal_command_list.append(self.get_command("START_RX"))
        if self.get_option("Modem.API_fc") > hi_low_ircal_separator_frequency:
            self.ir_cal_0.inputs.get_parameter_set("RX_CHAIN_SETTING1").set_value(0xfa)
            self.ir_cal_1.inputs.get_parameter_set("RX_CHAIN_SETTING1").set_value(0xfa)
        self.modem_calc_iq_cal_command_list.append(self.ir_cal_0)
        # TODO: Figure out if I ever need to add four NOP commands.
        # Even if yes, configure() takes in **kwargs, and that could contain
        # something indicating that the generated byte arrays are not part of
        # an app builder header, but some interactive use-case, e.g. batch and
        # RF Eval
        self.modem_calc_iq_cal_command_list.append(self.ir_cal_1)
        self.modem_calc_iq_cal_command_list.append(self.ir_change_state)
        # TODO: Figure out if I ever need to add four NOP commands.

    def _configureImpl(self, **kwargs):
        self.command_list[:] = []
        self._configure_modem()
        self.command_list += self.inputs.PowerUp.get_configuration(self)
        self.command_list += self.inputs.GpioPinCfg.get_configuration(self)
        self.command_list += self.inputs.CrystalCapBank.get_configuration(self)
        self.command_list += self.modem_calc_iq_cal_command_list
        self.command_list += self.inputs.FastResponseRegs.get_configuration(self)
        self.command_list += self.inputs.InterruptControl.get_configuration(self)
        if "PA_GRP" in self.radio_api.features:
            self.command_list += self.inputs.PowerAmplifier.get_configuration(self)
        self.command_list += self.inputs.Preamble.get_configuration(self)
        self.command_list += self.inputs.Sync.get_configuration(self)
        self.command_list += self.inputs.Pkt.get_configuration(self)
        self.command_list += self.inputs.Match.get_configuration(self)
        if "TX" in self.radio_api.features and self._is_gfsk():
            self.command_list += self.inputs.BandwidthTime.get_configuration(self)
        self.command_list += self.modem_calc_command_list
        if "RX" in self.radio_api.features:
            self.command_list += self.inputs.RssiConfig.get_configuration(self)
        self.command_list += self.inputs.Global.get_configuration(self)
        if "RX_HOP_GRP" in self.radio_api.features:
            self.command_list += self.inputs.AutoRxFreqHop.get_configuration(self)
        return self.get_raw_bytes(**kwargs)
   
